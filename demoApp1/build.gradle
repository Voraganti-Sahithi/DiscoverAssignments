plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.1-SNAPSHOT'
	id 'io.spring.dependency-management' version '1.1.6'
    id 'scala'  // Add the Scala plugin for Scala support
    //id 'io.gatling.gradle' version '3.9.5' 
    id 'io.gatling.gradle' version '3.13.1'
    id 'org.openapi.generator' version '6.3.0'
}

sourceSets {
    main {
        java {
            srcDir "$buildDir/generated/src/main/java"
        }
    }
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/snapshot' }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	implementation 'org.mapstruct:mapstruct:1.5.3.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.0'
    
    //wiremock
    //testImplementation 'com.github.tomakehurst:wiremock:3.10.0'
    testImplementation "org.wiremock:wiremock-standalone:3.10.0"
    
    // Mockito Core for mocking objects
    testImplementation 'org.mockito:mockito-core:5.5.0'

    // Mockito with JUnit 5 support
    testImplementation 'org.mockito:mockito-junit-jupiter:5.5.0'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    //implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    
    //cucumber
    testImplementation 'io.cucumber:cucumber-java:7.10.0' // Latest version
    testImplementation 'io.cucumber:cucumber-junit:7.10.0' // For JUnit test execution 
    testImplementation 'io.cucumber:cucumber-junit-platform-engine:7.10.0'
    testImplementation 'io.cucumber:cucumber-spring:7.14.0'
    
    // Jackson dependencies
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'

    // If you're using JSON processing, you might also want to include jackson-core and jackson-annotations
    implementation 'com.fasterxml.jackson.core:jackson-core:2.15.2'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.15.2'
    
    //JAXB
    // MOXy - JAXB implementation for JSON
    implementation 'org.eclipse.persistence:org.eclipse.persistence.moxy:2.7.7'

    // JAXB API - Required for JAXB annotations and classes
    implementation 'javax.xml.bind:jaxb-api:2.3.1'

    // EclipseLink JPA (javax.persistence)
    implementation 'org.eclipse.persistence:javax.persistence:2.2.0'
    
    // Gatling dependencies
	implementation 'io.gatling:gatling-core:3.13.1'   // Core Gatling library
	implementation 'io.gatling:gatling-http:3.13.1'   // HTTP module for Gatling
	implementation 'io.gatling.highcharts:gatling-charts-highcharts:3.13.1'  // Highcharts for Gatling results
	implementation 'org.scala-lang:scala-library:2.12.10'  // Scala library dependency (Compatible with Gatling 3.9.5)
	testImplementation 'org.scala-js:scalajs-test-bridge_2.12:1.9.0'   // Scala.js test bridge compatible with 2.12.x
	implementation 'com.typesafe:config:1.3.1'   // Configuration library
	    
    // Spring Batch dependencies
    implementation 'org.springframework.boot:spring-boot-starter-batch'
    implementation 'org.springframework.batch:spring-batch-core'
    implementation 'org.springframework.batch:spring-batch-infrastructure'
 
    // For writing to CSV
    implementation 'com.opencsv:opencsv:5.6'
    
    //Thymeleaf
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    
    //OpenAPI swagger
  	//implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'
    //implementation 'org.springdoc:springdoc-openapi-ui:2.3.0'
     implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.7.0'  // Latest Springdoc OpenAPI version
     implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2' 
    
    //sleuth
    //implementation 'org.springframework.cloud:spring-cloud-starter-sleuth'
    
    //Zipkin and micrometer
  	implementation 'io.micrometer:micrometer-tracing-bridge-brave'
  	implementation 'io.zipkin.reporter2:zipkin-reporter-brave'
 	
  	
  	//PACT provider
    //implementation 'au.com.dius.pact.provider:junit5spring:4.5.8'
    implementation 'au.com.dius.pact.provider:junit5:4.5.8'

}

openApiValidate {
    inputSpec = "$rootDir/api-docs.yaml"
    recommend = true
}

task generateOpenApiCode(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
    group = "build"
    description = "Generates Java code from OpenAPI specification"
    //dependsOn build  // Make sure this task runs after the build
    generatorName = "spring"  // Specify 'spring' for Spring Boot code generation
    inputSpec = "$rootDir/api-docs.yaml"  // Path to your OpenAPI YAML file
    outputDir = "$buildDir/generated"  // Directory to output generated files
    apiPackage = "com.example.demoApp1.api"  // API package name
    modelPackage = "com.example.demoApp1.model"  // Model package name
    configOptions = [
        sourceFolder: "swagger",  // Folder for sources
        java8: "true",  // Java 8 compatibility
        interfaceOnly: "false",  // Generate only interfaces, not implementation
        useBeanValidation: "true"  // Enable Bean Validation annotations
    ]
    validateSpec = false 
}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.withType(JavaCompile) {
    options.annotationProcessorPath = configurations.annotationProcessor
    options.encoding = 'UTF-8'
}


//jar {
//    from {
//        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
//    }
//    include 'com/example/demoApp1/**'
//    include 'com/example/demoApp1/bo/**'
//    include 'com/example/demoApp1/config/**'
//    include 'com/example/demoApp1/controller/**'
//    include 'com/example/demoApp1/dao/**'
//    include 'com/example/demoApp1/dto/**'
//    include 'com/example/demoApp1/exceptions/**'
//    include 'com/example/demoApp1/serviceImpl/**'
//    exclude 'com/example/demoApp1/thymeleaf/**'
//    archiveFileName = 'custom-app.jar'  // Optional: Set a custom name for the JAR file
//}
